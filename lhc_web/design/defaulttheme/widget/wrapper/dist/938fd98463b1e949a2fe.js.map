{"version":3,"sources":["webpack://UserList/./src/util/activityMonitoring.js"],"names":["activityMonitoring","this","params","timeoutStatuscheck","timeoutActivity","attributes","userActive","resetTimeout","resetTimeoutActivity","domEventsHandler","listen","window","document","wasInactive","syncUserStatus","clearTimeout","setTimeout","attatchActivityListeners","initMonitoring","sender","chatParams","getSessionAttributes","userSession","getVID","widgetStatus","value","department","join","helperFunctions","makeRequest","LHC_API","args","lhc_base_url","data","change_status","onlineStatus","online","next"],"mappings":"+aAAA,OACA,O,IA4FMA,EAAqB,I,WAzFvB,c,4FAAc,SACVC,KAAKC,OAAS,GACdD,KAAKE,mBAAqB,KAC1BF,KAAKG,gBAAkB,KACvBH,KAAKI,WAAa,KAClBJ,KAAKK,WAAa,E,6DAGK,WACvB,GAAIL,KAAKC,OAAL,eAA+B,CAE/B,IAAIK,EAAe,WACf,EAAKC,wBAGLP,KAAKC,OAAL,cACAO,mBAAiBC,OAAOC,OAAQ,YAAaJ,EAAc,mBAC3DE,mBAAiBC,OAAOE,SAAU,YAAaL,EAAc,oBAGjEE,mBAAiBC,OAAOC,OAAQ,YAAaJ,EAAc,iBAC3DE,mBAAiBC,OAAOC,OAAQ,QAASJ,EAAc,aACvDE,mBAAiBC,OAAOC,OAAQ,SAAUJ,EAAc,cACxDE,mBAAiBC,OAAOC,OAAQ,WAAYJ,EAAc,gBAC1DE,mBAAiBC,OAAOC,OAAQ,OAAQJ,EAAc,YACtDE,mBAAiBC,OAAOE,SAAU,SAAUL,EAAc,cAC1DE,mBAAiBC,OAAOE,SAAU,aAAcL,EAAc,kBAC9DE,mBAAiBC,OAAOE,SAAU,WAAYL,EAAc,gBAE5DN,KAAKO,0B,6CAIU,WACfK,EAAiC,GAAnBZ,KAAKK,WAEvBL,KAAKK,WAAa,EAEC,GAAfO,GACAZ,KAAKa,eAAe,GAGxBC,aAAad,KAAKG,iBAElBH,KAAKG,gBAAkBY,YAAW,WAC9B,EAAKV,WAAa,EAClB,EAAKQ,eAAe,KACrB,O,gCAGGZ,EAAQG,GACdJ,KAAKC,OAASA,EACdD,KAAKI,WAAaA,EAClBJ,KAAKgB,2BACLhB,KAAKiB,mB,uCAGQ,WACbH,aAAad,KAAKE,oBAClBF,KAAKE,mBAAqBa,YAAW,WACjC,EAAKF,eAAe,GACpB,EAAKI,mBACmB,IAAzBjB,KAAKC,OAAL,W,qCAGQiB,GAAQ,WACbC,EAAanB,KAAKI,WAAL,YAA+BgB,uBAE9CnB,EAAS,CACT,IAAOD,KAAKI,WAAWiB,YAAYC,SACnC,MAAUtB,KAAKI,WAAWmB,aAAaC,MAAQ,EAAI,EACnD,QAAWN,EACX,OAAUlB,KAAKK,WACf,IAAOL,KAAKI,WAAWqB,WAAWC,KAAK,MAGvCP,EAAA,IAAoBA,EAAA,OACpBlB,EAAA,KAAiBkB,EAAA,GAAmB,IAAMA,EAAA,MAG9CQ,kBAAgBC,YAAYC,QAAQC,KAAKC,aAAe/B,KAAKI,WAAL,KAA0B,iCAAkC,CAACH,OAAQA,IAAS,SAAC+B,GACzG,GAAtBA,EAAKC,eAAyB,EAAK7B,WAAW8B,aAAaV,OAASQ,EAAKG,QACzE,EAAK/B,WAAW8B,aAAaE,KAAKJ,EAAKG,e,QAQ/CpC","file":"938fd98463b1e949a2fe.js","sourcesContent":["import {domEventsHandler} from '../util/domEventsHandler';\nimport {helperFunctions} from '../lib/helperFunctions';\n\nclass _activityMonitoring {\n    constructor() {\n        this.params = {};\n        this.timeoutStatuscheck = null;\n        this.timeoutActivity = null;\n        this.attributes = null;\n        this.userActive = 1;\n    }\n\n    attatchActivityListeners() {\n        if (this.params['track_activity']) {\n\n            var resetTimeout = () => {\n                this.resetTimeoutActivity();\n            };\n\n            if (this.params['track_mouse']) {\n                domEventsHandler.listen(window, 'mousemove', resetTimeout, 'lhc_mousemove_w');\n                domEventsHandler.listen(document, 'mousemove', resetTimeout, 'lhc_mousemove_d');\n            }\n\n            domEventsHandler.listen(window, 'mousedown', resetTimeout, 'lhc_mousedown');\n            domEventsHandler.listen(window, 'click', resetTimeout, 'lhc_click');\n            domEventsHandler.listen(window, 'scroll', resetTimeout, 'lhc_scroll');\n            domEventsHandler.listen(window, 'keypress', resetTimeout, 'lhc_keypress');\n            domEventsHandler.listen(window, 'load', resetTimeout, 'lhc_load');\n            domEventsHandler.listen(document, 'scroll', resetTimeout, 'lhc_scroll');\n            domEventsHandler.listen(document, 'touchstart', resetTimeout, 'lhc_touchstart');\n            domEventsHandler.listen(document, 'touchend', resetTimeout, 'lhc_touchend');\n\n            this.resetTimeoutActivity();\n        }\n    }\n\n    resetTimeoutActivity() {\n        var wasInactive = this.userActive == 0;\n\n        this.userActive = 1;\n\n        if (wasInactive == true) {\n            this.syncUserStatus(1);\n        }\n\n        clearTimeout(this.timeoutActivity);\n\n        this.timeoutActivity = setTimeout(() => {\n            this.userActive = 0;\n            this.syncUserStatus(1);\n        }, 300 * 1000);\n    }\n\n    setParams(params, attributes) {\n        this.params = params;\n        this.attributes = attributes;\n        this.attatchActivityListeners();\n        this.initMonitoring();\n    }\n\n    initMonitoring() {\n        clearTimeout(this.timeoutStatuscheck);\n        this.timeoutStatuscheck = setTimeout(() => {\n            this.syncUserStatus(0);\n            this.initMonitoring();\n        }, this.params['timeout'] * 1000);\n    }\n\n    syncUserStatus(sender) {\n        const chatParams = this.attributes['userSession'].getSessionAttributes();\n\n        let params = {\n            'vid': this.attributes.userSession.getVID(),\n            'wopen': (this.attributes.widgetStatus.value ? 1 : 0),\n            'uaction': sender,\n            'uactiv': this.userActive,\n            'dep': this.attributes.department.join(',')\n        };\n\n        if (chatParams['id'] && chatParams['hash']) {\n            params['hash'] = chatParams['id'] + '_' + chatParams['hash'];\n        }\n\n        helperFunctions.makeRequest(LHC_API.args.lhc_base_url + this.attributes['lang'] + '/widgetrestapi/chatcheckstatus', {params: params}, (data) => {\n            if (data.change_status == true && this.attributes.onlineStatus.value != data.online) {\n                this.attributes.onlineStatus.next(data.online);\n            }\n        });\n    }\n\n}\n\nconst activityMonitoring = new _activityMonitoring();\nexport {activityMonitoring};"],"sourceRoot":""}