{"version":3,"file":"1dec08be200a3ae5f518.js","mappings":"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","sources":["webpack://LiveHelperChat/./src/util/nodeJSChat.js"],"sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _nodeJSChat {\n\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n    }\n\n    async setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const vid = this.attributes.userSession.getVID();\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            disconnectOnUnload: false,\n            authTokenName: 'socketCluster.authToken_vi'\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var socketCluster = require(\"socketcluster-client\");\n\n        var socket = socketCluster.create(socketOptions);\n\n        var chanelName = 'uo_' + vid;\n        var instance_id = this.attributes.instance_id;\n        var sampleChannel = null;\n\n        let status = await socket.listener('connect').once();\n        if (status.isAuthenticated) {\n            connectSiteVisitor();\n            attributes.LHC_API.args.check_messages = false;\n        } else {\n            authentificate();\n        }\n\n        try {\n            for await (let event of socket.listener('deauthenticate')) {\n                authentificate();\n            }\n        } catch (e) {\n            // shut up old browers\n        }\n\n\n        function authentificate() {\n            helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, async (data) => {\n                instance_id = data.instance_id;\n                await Promise.all([\n                    socket.invoke('login',{hash: data.hash, chanelName: chanelName, instance_id: data.instance_id}),\n                    socket.listener('authenticate').once()\n                ]);\n                connectSiteVisitor();\n            })\n        }\n\n        async function connectSiteVisitor() {\n            var firstRun = sampleChannel == null;\n            sampleChannel = socket.subscribe('uo_' + vid);\n            if (firstRun == true) {\n                try {\n                    // We want to receive signal is widget open in any of the windows\n                    attributes.mode != 'embed' && !attributes.widgetStatus.value && socket.transmitPublish('uo_' + vid, {op: 'ws_isopen'});\n\n                    // Subscribe to widget status, just ignore initial status\n                    attributes.mode != 'embed' && attributes.widgetStatus.subscribe((data) => {\n                        socket.transmitPublish('uo_' + vid, {op: 'wstatus', status: data});\n                    }, true);\n\n                    // Listen for chat started event and dispatch to other windows\n                    attributes.eventEmitter.addListener('chatStarted', function (data, mode) {\n                        if (mode !== 'popup' || attributes.kcw === true) {\n                            socket.transmitPublish('uo_' + vid, {op: 'chat_started', data: data});\n                        }\n                    });\n                } catch (e) {\n                    console.log(e);\n                }\n                try {\n                    for await (let op of sampleChannel) {\n                        if (op.op == 'check_message') {\n                            attributes.eventEmitter.emitEvent('checkMessageOperator');\n                        } else if (op.op == 'is_online') {\n                            socket.transmitPublish('ous_'+instance_id,{op:'vi_online', status: true, vid: vid});\n                        } else if (op.op == 'chat_started') {\n                            try {\n                                if (attributes.userSession.id === null && op.data.id) {\n                                    chatEvents.sendChildEvent('reopenNotification', [{\n                                        'id': op.data.id,\n                                        'hash': op.data.hash\n                                    }]);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'ws_isopen') {\n                            try {\n                                if (attributes.mode != 'embed' && attributes.widgetStatus.value) {\n                                    socket.transmitPublish('uo_'+vid,{op:'wstatus', status: true});\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'wstatus') {\n                            try {\n                                if (attributes.mode != 'embed' && op.status != attributes.widgetStatus.value) {\n                                    attributes.widgetStatus.next(op.status);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        }\n                    }\n                } catch (e) {\n                    // shut up old browsers\n                }\n            }\n        }\n\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport {nodeJSChat};\n\n"],"names":["_nodeJSChat","_createClass","_classCallCheck","this","params","attributes","chatEvents","key","value","_setParams","_asyncToGenerator","_regeneratorRuntime","_callee3","vid","socketOptions","socketCluster","socket","chanelName","instance_id","sampleChannel","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","authentificate","connectSiteVisitor","_connectSiteVisitor","_context3","prev","next","_callee2","firstRun","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","op","_context2","subscribe","mode","widgetStatus","transmitPublish","data","status","eventEmitter","addListener","kcw","e","console","log","_asyncIterator","sent","done","emitEvent","userSession","id","sendChildEvent","hash","t0","return","finish","t1","stop","apply","arguments","helperFunctions","makeRequest","LHC_API","args","lhc_base_url","ts","Date","getTime","_ref","_callee","_context","Promise","all","invoke","listener","once","_x4","getVID","protocolVersion","hostname","path","disconnectOnUnload","authTokenName","port","parseInt","secure","require","create","isAuthenticated","check_messages","_x","_x2","_x3","nodeJSChat"],"sourceRoot":""}