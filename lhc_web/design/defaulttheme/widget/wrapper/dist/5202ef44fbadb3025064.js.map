{"version":3,"sources":["webpack://LiveHelperChat/./src/util/analyticEvents.js"],"names":["_analyticEvents","this","params","attributes","initMonitoring","forEach","item","eventEmitter","addListener","ev","full","label","el","name","trigger","length","triggerLabel","js","replace","JSON","stringify","ec","ea","eval","err","console","log","analyticEvents"],"mappings":"2eAAA,yCACA,wC,gHAEMA,gB,WACF,2BAAc,sCACVC,KAAKC,OAAS,G,qEAGRA,EAAQC,GACdF,KAAKC,OAASA,EACdD,KAAKE,WAAaA,EAClBF,KAAKG,mB,sDAGQ,eACbH,KAAKC,OAAL,UAA4BG,SAAQ,SAACC,MACjC,MAAKH,WAAWI,aAAaC,YAAYF,KAAKG,IAAI,SAACP,QAE/C,GAAe,kBAAXI,KAAKG,SAA4C,IAAXP,SAA0BA,OAAOQ,KAA3E,CAIA,IAAIC,MAAQL,KAAKM,GAGjB,GAAgB,kBAAXN,KAAKG,IAAqC,kBAAXH,KAAKG,IAAqC,kBAAXH,KAAKG,IAAqC,oBAAXH,KAAKG,SAA+C,IAAXP,SAA0BA,OAAOW,MAErK,GAAe,cAAXP,KAAKG,GACZ,YAAsB,IAAXP,QAA0BA,OAAOY,SAAWZ,OAAOY,QAAQC,OAAS,OAC3Eb,OAAOY,QAAQT,SAAQ,SAACW,cACpB,IAAIC,GAAK,MAAKf,OAAL,MAAwBgB,QAC7B,yBAAyBC,KAAKC,UAAUd,KAAKe,KAC/CH,QACE,uBAAuBC,KAAKC,UAAUd,KAAKgB,KAC7CJ,QACE,sBAAsBC,KAAKC,UAAUJ,eACvCE,QACE,yBAAyBC,KAAKC,UAAUd,KAAKG,KAGjD,IACIc,KAAKN,IACP,MAAOO,GACLC,QAAQC,IAAIF,YAKpB,OAtBJb,MAAQA,OAAST,OAAOW,KA0B3B,IAAII,GAAK,MAAKf,OAAL,MAAwBgB,QAC7B,yBAAyBC,KAAKC,UAAUd,KAAKe,KAC/CH,QACE,uBAAuBC,KAAKC,UAAUd,KAAKgB,KAC7CJ,QACE,sBAAsBC,KAAKC,UAAUT,QACvCO,QACE,yBAAyBC,KAAKC,UAAUd,KAAKG,KAIjD,IACIc,KAAKN,IACP,MAAOO,GACNC,QAAQC,IAAIF,e,mBAU1BG,eAAiB,IAAI3B,gB,QACnB2B","file":"5202ef44fbadb3025064.js","sourcesContent":["import {domEventsHandler} from '../util/domEventsHandler';\nimport {helperFunctions} from '../lib/helperFunctions';\n\nclass _analyticEvents {\n    constructor() {\n        this.params = {};\n    }\n\n    setParams(params, attributes) {\n        this.params = params;\n        this.attributes = attributes;\n        this.initMonitoring();\n    }\n\n    initMonitoring() {\n        this.params['ga']['events'].forEach((item) => {\n            this.attributes.eventEmitter.addListener(item.ev, (params) => {\n\n                if (item.ev == 'hideInvitation' && typeof params !== 'undefined' && params.full) {\n                    return ;\n                }\n\n                var label = item.el;\n\n                // Set invitation name\n                if ((item.ev == 'showInvitation' || item.ev == 'readInvitation' || item.ev == 'fullInvitation' || item.ev == 'cancelInvitation') && typeof params !== 'undefined' && params.name) {\n                    label = label || params.name;\n                } else if (item.ev == 'botTrigger') {\n                    if (typeof params !== 'undefined' && params.trigger && params.trigger.length > 0) {\n                        params.trigger.forEach((triggerLabel) => {\n                            var js = this.params['ga']['js'].replace(\n                                /\\{\\{eventCategory\\}\\}/g,JSON.stringify(item.ec)\n                            ).replace(\n                                /\\{\\{eventAction\\}\\}/g,JSON.stringify(item.ea)\n                            ).replace(\n                                /\\{\\{eventLabel\\}\\}/g,JSON.stringify(triggerLabel)\n                            ).replace(\n                                /\\{\\{eventInternal\\}\\}/g,JSON.stringify(item.ev)\n                            );\n\n                            try {\n                                eval(js);\n                            } catch (err) {\n                                console.log(err);\n                            }\n                        });\n                        return ;\n                    } else {\n                        return;\n                    }\n                }\n\n                 var js = this.params['ga']['js'].replace(\n                     /\\{\\{eventCategory\\}\\}/g,JSON.stringify(item.ec)\n                 ).replace(\n                     /\\{\\{eventAction\\}\\}/g,JSON.stringify(item.ea)\n                 ).replace(\n                     /\\{\\{eventLabel\\}\\}/g,JSON.stringify(label)\n                 ).replace(\n                     /\\{\\{eventInternal\\}\\}/g,JSON.stringify(item.ev)\n                 );\n\n\n                 try {\n                     eval(js);\n                 } catch (err) {\n                    console.log(err);\n                 }\n\n            });\n        });\n    }\n\n\n}\n\nconst analyticEvents = new _analyticEvents();\nexport {analyticEvents};"],"sourceRoot":""}