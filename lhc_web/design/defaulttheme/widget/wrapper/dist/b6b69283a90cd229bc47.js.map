{"version":3,"file":"b6b69283a90cd229bc47.js","mappings":"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","sources":["webpack://LiveHelperChat/./src/util/nodeJSChat.js"],"sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _nodeJSChat {\n\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n    }\n\n    async setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const vid = this.attributes.userSession.getVID();\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            authTokenName: 'socketCluster.authToken_vi'\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var socketCluster = require(\"socketcluster-client\");\n\n        var socket = socketCluster.create(socketOptions);\n\n        var chanelName = 'uo_' + vid;\n        var instance_id = this.attributes.instance_id;\n        var sampleChannel = null;\n\n        let status = await socket.listener('connect').once();\n        if (status.isAuthenticated) {\n            connectSiteVisitor();\n            attributes.LHC_API.args.check_messages = false;\n        } else {\n            authentificate();\n        }\n\n        try {\n            for await (let event of socket.listener('deauthenticate')) {\n                authentificate();\n            }\n        } catch (e) {\n            // shut up old browers\n        }\n\n\n        function authentificate() {\n            helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, async (data) => {\n                instance_id = data.instance_id;\n                await Promise.all([\n                    socket.invoke('login',{hash: data.hash, chanelName: chanelName, instance_id: data.instance_id}),\n                    socket.listener('authenticate').once()\n                ]);\n                connectSiteVisitor();\n            })\n        }\n\n        async function connectSiteVisitor() {\n            var firstRun = sampleChannel == null;\n            sampleChannel = socket.subscribe('uo_' + vid);\n            if (firstRun == true) {\n                try {\n                    // We want to receive signal is widget open in any of the windows\n                    !attributes.widgetStatus.value && socket.transmitPublish('uo_' + vid, {op: 'ws_isopen'});\n\n                    // Subscribe to widget status, just ignore initial status\n                    attributes.widgetStatus.subscribe((data) => {\n                        socket.transmitPublish('uo_' + vid, {op: 'wstatus', status: data});\n                    }, true);\n\n                    // Listen for chat started event and dispatch to other windows\n                    attributes.eventEmitter.addListener('chatStarted', function (data, mode) {\n                        if (mode !== 'popup' || attributesWidget.kcw === true) {\n                            socket.transmitPublish('uo_' + vid, {op: 'chat_started', data: data});\n                        }\n                    });\n                } catch (e) {\n                    console.log(e);\n                }\n                try {\n                    for await (let op of sampleChannel) {\n                        if (op.op == 'check_message') {\n                            attributes.eventEmitter.emitEvent('checkMessageOperator');\n                        } else if (op.op == 'is_online') {\n                            socket.transmitPublish('ous_'+instance_id,{op:'vi_online', status: true, vid: vid});\n                        } else if (op.op == 'chat_started') {\n                            try {\n                                if (attributes.userSession.id === null && op.data.id) {\n                                    chatEvents.sendChildEvent('reopenNotification', [{\n                                        'id': op.data.id,\n                                        'hash': op.data.hash\n                                    }]);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'ws_isopen') {\n                            try {\n                                if (attributes.widgetStatus.value) {\n                                    socket.transmitPublish('uo_'+vid,{op:'wstatus', status: true});\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'wstatus') {\n                            try {\n                                if (op.status != attributes.widgetStatus.value) {\n                                    attributes.widgetStatus.next(op.status);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        }\n                    }\n                } catch (e) {\n                    // shut up old browsers\n                }\n            }\n        }\n\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport {nodeJSChat};\n\n"],"names":["_nodeJSChat","_createClass","_classCallCheck","this","params","attributes","chatEvents","key","value","_setParams","_asyncToGenerator","_regeneratorRuntime","_callee3","vid","socketOptions","socketCluster","socket","chanelName","instance_id","sampleChannel","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","authentificate","connectSiteVisitor","_connectSiteVisitor","_context3","prev","next","_callee2","firstRun","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","op","_context2","subscribe","widgetStatus","transmitPublish","data","status","eventEmitter","addListener","mode","attributesWidget","kcw","e","console","log","_asyncIterator","sent","done","emitEvent","userSession","id","sendChildEvent","hash","t0","return","finish","t1","stop","apply","arguments","helperFunctions","makeRequest","LHC_API","args","lhc_base_url","ts","Date","getTime","_ref","_callee","_context","Promise","all","invoke","listener","once","_x4","getVID","protocolVersion","hostname","path","authTokenName","port","parseInt","secure","require","create","isAuthenticated","check_messages","_x","_x2","_x3","nodeJSChat"],"sourceRoot":""}