{"version":3,"sources":["webpack://LiveHelperChat/./src/util/screenShare.js"],"names":["screenShare","this","params","attributes","chatEvents","isSharing","sharemode","sharehash","cobrowser","formsEnabled","LHCCoBrowser","eventEmitter","encodeURIComponent","location","href","match","startMirroring","listener","data","handleMessage","split","addListener","addOnceListener","helperFunctions","removeById","storageHandler","removeSessionStorage","th","document","getElementsByTagName","s","createElement","window","substring","protocol","length","setAttribute","LHC_API","args","lhc_base_url","appendChild","removeListener","setSessionStorage","chatParams","getSessionAttributes","makeRequest","initCoBrowsing","addCss","appendHTML","trans","start_share","deny","btn","getElementById","btnDeny","modal","onclick","addEventListener","event","target","EId","EObj","parentNode","removeChild","htmlStr","frag","createDocumentFragment","temp","innerHTML","firstChild","body","insertBefore","childNodes","css_content","head","style","type","styleSheet","cssText","rules","createTextNode","TreeMirror","onreadystatechange","onload","startCoBrowse"],"mappings":"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","file":"a77d7283e733bea17cce.js","sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _screenShare {\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n\n        this.isSharing = false;\n        this.sharemode = 'chat';\n        this.sharehash = null;\n        this.cobrowser = null;\n    }\n\n    startCoBrowse(params) {\n\n        if (typeof formsEnabled == \"undefined\") var formsEnabled = false;\n\n        this.isSharing = true;\n\n        this.cobrowser = new LHCCoBrowser({'formsenabled':formsEnabled,\n                'chat_hash': this.sharehash,\n                'event_emitter': this.attributes.eventEmitter,\n                'nodejssettings': params['nodejssettings'],\n                'nodejsenabled': params['nodejsenabled'],\n                'trans': params['trans'],\n            'url': params['url']+'/(hash)/'+this.sharehash+'/?url='+encodeURIComponent(location.href.match(/^(.*\\/)[^\\/]*$/)[1])});\n        this.cobrowser.startMirroring();\n\n        let listener = (data) => {\n            if (this.cobrowser) {\n                this.cobrowser.handleMessage(data.split(':'));\n            }\n        };\n\n        this.attributes.eventEmitter.addListener('screenshareCommand', listener);\n        \n        this.attributes.eventEmitter.addOnceListener('finishScreenSharing', (data) => {\n\n            helperFunctions.removeById('lhc_status_mirror');\n\n            this.attributes.storageHandler.removeSessionStorage(this.attributes['prefixStorage']+'_screenshare');\n\n            this.isSharing = false;\n  \n            var th = document.getElementsByTagName('head')[0];\n            var s = document.createElement('script');\n            var locationCurrent = encodeURIComponent(window.location.href.substring(window.location.protocol.length));\n            s.setAttribute('id','lhc_finish_shr');\n            s.setAttribute('type','text/javascript');\n            s.setAttribute('src',this.attributes.LHC_API.args.lhc_base_url+'/cobrowse/finishsession/(sharemode)/chat/(hash)/'+this.sharehash);\n            th.appendChild(s);\n\n            this.cobrowser = null;\n\n            this.attributes.eventEmitter.removeListener('screenshareCommand',listener);\n        });\n\n        this.attributes.storageHandler.setSessionStorage(this.attributes['prefixStorage']+'_screenshare',1);\n    }\n\n    setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const chatParams = this.attributes['userSession'].getSessionAttributes();\n\n        this.sharehash = chatParams['id'] + '_' + chatParams['hash'];\n\n        if (this.isSharing == false) {\n            helperFunctions.makeRequest(this.attributes.LHC_API.args.lhc_base_url + '/widgetrestapi/screensharesettings', {}, (data) => {\n                if (this.params['auto_start'] || data['auto_share'] == 1) {\n                    this.initCoBrowsing(data);\n                } else {\n\n                    this.addCss('.lhc-modal {display: none; position: fixed; z-index: 1000001 !important;padding-top: 100px;left: 0;top: 0;  width: 100%;height: 100%; overflow: auto; background-color: rgb(0,0,0);  background-color: rgba(0,0,0,0.4); }'+\n                                  '.lhc-modal-content {background-color: #fefefe; margin: auto; padding: 20px; border: 1px solid #888; width: 60%;border-radius:5px; }'+\n                                  '#lhc-close { color: #aaaaaa;    float: right;  font-size: 28px;    font-weight: bold;  }'+\n                                  '#lhc-close:hover,#lhc-close:focus {color: #000; text-decoration: none; cursor: pointer;}');\n\n                    this.appendHTML('<div id=\"lhc-co-browsing-modal\" style=\"display: block\" class=\"lhc-modal\">'+\n                        '<div class=\"lhc-modal-content\">'+\n                            '<span id=\"lhc-close\">&times;</span>'+\n                            '<p style=\"text-align: center\"><button id=\"lhc-start-share-session\" style=\"background-color: #4CAF50;' +\n                        '  border: none;' +\n                        '  color: white;' +\n                        '  padding: 7px 16px;' +\n                        '  text-align: center;border-radius:5px;' +\n                        '  text-decoration: none;' +\n                        '  display: inline-block;' +\n                        '  font-size: 16px;' +\n                        '  margin: 4px 2px;' +\n                        '  cursor: pointer;\">' + data.trans.start_share + '</button><button id=\"lhc-deny-share-session\" style=\"background-color: #d2404a;' +\n                        '  border: none;' +\n                        '  color: white;' +\n                        '  padding: 7px 16px;' +\n                        '  text-align: center;border-radius:5px;' +\n                        '  text-decoration: none;' +\n                        '  display: inline-block;' +\n                        '  font-size: 16px;' +\n                        '  margin: 4px 2px;' +\n                        '  cursor: pointer;\">' + data.trans.deny + '</button></p></div></div>');\n\n                    var btn = document.getElementById(\"lhc-close\");\n                    var btnDeny = document.getElementById(\"lhc-deny-share-session\");\n                    var modal = document.getElementById(\"lhc-co-browsing-modal\");\n\n                    btnDeny.onclick = btn.onclick = () => {\n                        this.removeById('lhc-co-browsing-modal');\n                    }\n\n                    window.addEventListener('click',(event) => {\n                        if (event.target == modal) {\n                            this.removeById('lhc-co-browsing-modal');\n                        }\n                    });\n\n                    document.getElementById(\"lhc-start-share-session\").onclick = () => {\n                        this.removeById('lhc-co-browsing-modal');\n                        this.initCoBrowsing(data);\n                    };\n                }\n            });\n        }\n    }\n\n    removeById(EId)\n    {\n        var EObj = null;\n        return(EObj = document.getElementById(EId))?EObj.parentNode.removeChild(EObj):false;\n    }\n\n    appendHTML(htmlStr) {\n        var frag = document.createDocumentFragment(),\n            temp = document.createElement('div');\n        temp.innerHTML = htmlStr;\n        while (temp.firstChild) {\n            frag.appendChild(temp.firstChild);\n        };\n        document.body.insertBefore(frag, document.body.childNodes[0]);\n    }\n\n    addCss(css_content) {\n        var head = document.getElementsByTagName('head')[0];\n        var style = document.createElement('style');\n        style.type = 'text/css';\n\n        if (style.styleSheet) {\n            style.styleSheet.cssText = css_content;\n        } else {\n            var rules = document.createTextNode(css_content);\n            style.appendChild(rules);\n        };\n\n        head.appendChild(style);\n    }\n\n    initCoBrowsing(data) {\n        if (typeof TreeMirror == \"undefined\") {\n            var th = document.getElementsByTagName('head')[0];\n            var s = document.createElement('script');\n            s.setAttribute('type', 'text/javascript');\n            s.setAttribute('src', data['cobrowser']);\n            th.appendChild(s);\n            s.onreadystatechange = s.onload = () => {\n                this.startCoBrowse(data);\n            };\n        } else {\n            this.startCoBrowse(data);\n        }\n    }\n}\n\nconst screenShare = new _screenShare();\nexport {screenShare};\n\n"],"sourceRoot":""}