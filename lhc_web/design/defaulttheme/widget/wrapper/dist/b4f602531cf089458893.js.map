{"version":3,"file":"b4f602531cf089458893.js","mappings":"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","sources":["webpack://LiveHelperChat/./src/util/nodeJSChat.js"],"sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _nodeJSChat {\n\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n    }\n\n    async setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const vid = this.attributes.userSession.getVID();\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            disconnectOnUnload: false,\n            authTokenName: 'socketCluster.authToken_vi'\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var socketCluster = require(\"socketcluster-client\");\n\n        var socket = socketCluster.create(socketOptions);\n\n        var chanelName = 'uo_' + vid;\n        var instance_id = this.attributes.instance_id;\n        var sampleChannel = null;\n        // Do not update vars while we are updating it from other browser tabs\n        var ignoreVars = false;\n\n        let status = await socket.listener('connect').once();\n        if (status.isAuthenticated) {\n            connectSiteVisitor();\n            attributes.LHC_API.args.check_messages = false;\n        } else {\n            authentificate();\n        }\n\n        try {\n            for await (let event of socket.listener('deauthenticate')) {\n                authentificate();\n            }\n        } catch (e) {\n            // shut up old browers\n        }\n\n\n        function authentificate() {\n            helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, async (data) => {\n                instance_id = data.instance_id;\n                await Promise.all([\n                    socket.invoke('login',{hash: data.hash, chanelName: chanelName, instance_id: data.instance_id}),\n                    socket.listener('authenticate').once()\n                ]);\n                connectSiteVisitor();\n            })\n        }\n\n        async function connectSiteVisitor() {\n            var firstRun = sampleChannel == null, ignoreNext = false, timeoutClear = null;\n            sampleChannel = socket.subscribe('uo_' + vid);\n            if (firstRun == true) {\n                try {\n                    // We want to receive signal is widget open in any of the windows\n                    attributes.mode != 'embed' && !attributes.widgetStatus.value && socket.transmitPublish('uo_' + vid, {op: 'ws_isopen', 'clientId' : sampleChannel.client.clientId});\n\n                    // We want to publish request to receive all the vars other instances has\n                    if (attributes.lhc_var !== null) {\n                        socket.transmitPublish('uo_' + vid, { 'clientId' : sampleChannel.client.clientId, op: 'check_vars', 'init':false, 'lhc_var': attributes.lhc_var});\n                        attributes.eventEmitter.addListener('jsVarsUpdated', function () {\n                            ignoreVars === false && attributes.ignoreVars === false && socket.transmitPublish('uo_' + vid, {'clientId' : sampleChannel.client.clientId, op:'current_vars', 'init':false, 'lhc_var': attributes.lhc_var});\n                            ignoreVars = false;\n                        });\n                    }\n\n                    // Subscribe to widget status, just ignore initial status\n                    attributes.mode != 'embed' && attributes.widgetStatus.subscribe((data) => {\n                        if (ignoreNext == true) {\n                            clearTimeout(timeoutClear);\n                            timeoutClear = setTimeout(() => {\n                                ignoreNext = false;\n                            }, 1000);\n                            return;\n                        }\n                        socket.transmitPublish('uo_' + vid, {op: 'wstatus', status: data, 'clientId' : sampleChannel.client.clientId,});\n                    }, true);\n\n                    // Listen for chat started event and dispatch to other windows\n                    attributes.eventEmitter.addListener('chatStarted', function (data, mode) {\n                        if (mode !== 'popup' || attributes.kcw === true) {\n                            socket.transmitPublish('uo_' + vid, {op: 'chat_started', data: data, 'clientId' : sampleChannel.client.clientId,});\n                        }\n                    });\n                } catch (e) {\n                    console.log(e);\n                }\n                try {\n                    for await (let op of sampleChannel) {\n                        if (op.op == 'check_message') {\n                            attributes.eventEmitter.emitEvent('checkMessageOperator');\n                        } else if (op.op == 'is_online') {\n                            socket.transmitPublish('ous_'+instance_id,{op:'vi_online', status: true, vid: vid});\n                        } else if (op.op == 'chat_started') {\n                            try {\n                                if (attributes.userSession.id === null && op.data.id && sampleChannel.client.clientId != op.clientId) {\n                                    chatEvents.sendChildEvent('reopenNotification', [{\n                                        'id': op.data.id,\n                                        'hash': op.data.hash\n                                    }]);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'ws_isopen') {\n                            try {\n                                if (attributes.mode != 'embed' && attributes.widgetStatus.value && sampleChannel.client.clientId != op.clientId) {\n                                    socket.transmitPublish('uo_'+vid,{op:'wstatus', status: true});\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n\n                        } else if (op.op == 'wstatus') {\n                            try {\n                                if (attributes.mode != 'embed' && op.status != attributes.widgetStatus.value && sampleChannel.client.clientId != op.clientId) {\n                                    ignoreNext = true;\n                                    attributes.widgetStatus.next(op.status);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'current_vars' || op.op == 'check_vars') {\n                            try {\n                                if (sampleChannel.client.clientId != op.clientId){\n                                    if (op.lhc_var && attributes.lhc_var !== null) {\n                                        ignoreVars = true;\n                                        attributes.ignoreVars = true;\n                                        for (var index in op.lhc_var) {\n                                            if ((typeof attributes.lhc_var[index] === 'undefined' || attributes.lhc_var[index] === '' || op.init === false) && op.lhc_var[index] !== '' && attributes.lhc_var[index] !== op.lhc_var[index]) {\n                                                attributes.lhc_var[index] = op.lhc_var[index];\n                                            }\n                                        }\n                                        attributes.ignoreVars = false;\n                                    }\n                                    if (op.op == 'check_vars') {\n                                        attributes.lhc_var !== null && socket.transmitPublish('uo_'+vid,{'clientId' : sampleChannel.client.clientId, op:'current_vars', 'init':true, 'lhc_var': attributes.lhc_var});\n                                    }\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        }\n                    }\n                } catch (e) {\n                    // shut up old browsers\n                }\n            }\n        }\n\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport {nodeJSChat};\n\n"],"names":["_nodeJSChat","_createClass","_classCallCheck","this","params","attributes","chatEvents","key","value","_setParams","_asyncToGenerator","_regeneratorRuntime","_callee3","vid","socketOptions","socketCluster","socket","chanelName","instance_id","sampleChannel","ignoreVars","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","authentificate","connectSiteVisitor","_connectSiteVisitor","_t3","_context3","prev","next","_callee2","firstRun","ignoreNext","timeoutClear","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","op","index","_t","_context2","subscribe","mode","widgetStatus","transmitPublish","client","clientId","lhc_var","eventEmitter","addListener","data","clearTimeout","setTimeout","status","kcw","e","console","log","_asyncIterator","sent","done","emitEvent","userSession","id","sendChildEvent","hash","init","return","finish","stop","apply","arguments","helperFunctions","makeRequest","LHC_API","args","lhc_base_url","ts","Date","getTime","_ref","_callee","_context","Promise","all","invoke","listener","once","_x4","getVID","protocolVersion","hostname","path","disconnectOnUnload","authTokenName","port","parseInt","secure","require","create","isAuthenticated","check_messages","_x","_x2","_x3","nodeJSChat"],"sourceRoot":""}