{"version":3,"sources":["webpack://LHCReactAPPAdmin/./src/components/DashboardChatTabs.js"],"names":["reducer","state","action","type","foundIndex","chats","findIndex","x","id","value","attr","unshift","active","mn","support_chat","splice","msg","el","document","getElementById","classList","contains","group_offline","Error","DashboardChatTabs","props","useReducer","dispatch","chatsRef","useRef","useEffect","current","a","b","loadChatTabIntro","chatIds","axios","get","WWW_DIR_JAVASCRIPT","join","map","chat","index","push","getChatIds","then","result","data","addTab","chatId","params","focus","addTabBackground","removeTab","tabClicked","chatAdminSync","lhinst","hidenicknamesstatus","Object","keys","result_status","key","chat_id","typingVisitor","tp","txt","typingVisitorStopped","activateNextTab","chatid","up","length","chatTabClick","ee","addListener","unread","localStorage","achat_id","getItem","ids","split","entries","forEach","parseInt","setTimeout","removeListener","$","click","useTranslation","t","i18n","Fragment","className","title","onClick","us","um","cc","cn","src","alt","cs","nick","lmsg","e","preventDefault","stopPropagation","removeDialogTab","closeDialog","dep","co","confLH","user_id","tx"],"mappings":"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","file":"4.b964544dc5f0f485db8c.js","sourcesContent":["import React, { useEffect, useState, useReducer, useRef } from \"react\";\nimport axios from \"axios\";\nimport {useTranslation} from 'react-i18next';\n\nfunction reducer(state, action) {\n    switch (action.type) {\n\n        case 'attr':\n            var foundIndex = state.chats.findIndex(x => x.id == action.id);\n            if (foundIndex === -1) return state;\n            state.chats[foundIndex] = { ...state.chats[foundIndex], ...action.value};\n            state = { ... state};\n            return state;\n\n        case 'attr_remove':\n            var foundIndex = state.chats.findIndex(x => x[action.attr] == action.id);\n            if (foundIndex === -1) return state;\n            state.chats[foundIndex] = { ...state.chats[foundIndex], ...action.value};\n            state = { ... state};\n            return state;\n\n        case 'update': {\n            return { ...state, ...action.value }\n        }\n\n        case 'add': {\n            var foundIndex = state.chats.findIndex(x => x.id == action.value.id);\n            if (foundIndex === -1) {\n                state.chats.unshift(action.value);\n            } else {\n                state.chats[foundIndex].active = true;\n                state.chats[foundIndex].mn = 0;\n                state.chats[foundIndex].support_chat = false;\n            }\n\n            return { ...state}\n        }\n\n        case 'remove': {\n            var foundIndex = state.chats.findIndex(x => x.id == action.id);\n            if (foundIndex === -1) return state;\n            state.chats.splice(foundIndex,1);\n            return { ...state}\n        }\n\n        case 'update_chat': {\n            var foundIndex = state.chats.findIndex(x => x.id == action.id);\n            if (foundIndex === -1) return state;\n            state.chats[foundIndex] = {...state.chats[foundIndex], ...action.value}\n            return { ...state}\n        }\n\n        case 'msg_received': {\n            var foundIndex = state.chats.findIndex(x => x.id == action.id);\n            if (foundIndex === -1) return state;\n\n            state.chats[foundIndex].msg = action.value.msg;\n\n            var el = document.getElementById('chat-tab-link-'+action.id);\n\n            if (el === null || !el.classList.contains('active')) {\n                state.chats[foundIndex].active = false;\n            } else {\n                state.chats[foundIndex].active = true;\n            }\n\n            state.chats[foundIndex].mn = state.chats[foundIndex].active == false ? (state.chats[foundIndex].mn ? (state.chats[foundIndex].mn + action.value.mn) : action.value.mn) : 0;\n\n            // Set last appended messages as first array element\n            state.chats.splice(0, 0, state.chats.splice(foundIndex, 1)[0]);\n\n            return { ...state}\n        }\n\n        case 'refocus': {\n            var foundIndex = state.chats.findIndex(x => x.active == true);\n            if (foundIndex !== -1) {\n                if (action.id == state.chats[foundIndex].id) {\n                    return state;\n                }\n                state.chats[foundIndex].active = false;\n            }\n\n            var foundIndex = state.chats.findIndex(x => x.id == action.id);\n            if (foundIndex !== -1) {\n                state.chats[foundIndex].active = true;\n                state.chats[foundIndex].mn = 0;\n                state.chats[foundIndex].support_chat = false;\n            }\n\n            return { ...state}\n        }\n\n        case 'group_offline':\n            state.group_offline = action.value;\n            return {...state};\n\n        default:\n            throw new Error('Unknown action!');\n    }\n}\n\nconst DashboardChatTabs = props => {\n\n    const [state, dispatch] = useReducer(reducer, {\n        chats: [],\n        group_offline : false\n    });\n\n    const chatsRef = useRef(state);\n\n    useEffect(\n        () => { chatsRef.current = state },\n        [state]\n    )\n\n    a+b;\n\n    const getChatIds = () => {\n        var chatIds = [];\n        state.chats.map((chat, index) => chatIds.push(chat.id));\n        return chatIds;\n    }\n\n    const loadChatTabIntro = (chatIds) => {\n        axios.get(WWW_DIR_JAVASCRIPT  + \"front/tabs/(id)/\" + (typeof chatIds !== 'undefined' ? chatIds.join('/') : getChatIds().join('/'))).then(result => {\n            result.data.map((chat, index) => dispatch({\n                type: 'update_chat',\n                id: chat.id,\n                value: chat\n            }))\n        });\n    }\n\n    useEffect(() => {\n\n        function addTab(chatId, params) {\n            if (params.focus) {\n                dispatch({\n                    type: 'attr_remove',\n                    id: true,\n                    attr: 'active',\n                    value: {\n                        \"active\" : false\n                    }\n                });\n            }\n\n            dispatch({\n                type: 'add',\n                value: {\n                    \"id\" : chatId,\n                    active: params.focus\n                }\n            });\n            loadChatTabIntro([chatId]);\n        }\n\n        function addTabBackground(chatId, params) {\n            dispatch({\n                type: 'add',\n                value: {\n                    \"id\" : chatId,\n                    active: false,\n                    mn : 1\n                }\n            });\n            loadChatTabIntro([chatId]);\n        }\n\n        function removeTab(chatId) {\n            dispatch({\n                type: 'remove',\n                id: chatId\n            });\n        }\n\n        function tabClicked(chatId) {\n            dispatch({\n                type: 'refocus',\n                id: chatId\n            });\n        }\n\n        function chatAdminSync(data) {\n\n            dispatch({\n                type: 'group_offline',\n                value: lhinst.hidenicknamesstatus\n            })\n\n            Object.keys(data.result_status).map((key) => {\n                dispatch({\n                    type: 'update_chat',\n                    id: data.result_status[key].chat_id,\n                    value: data.result_status[key]\n                })\n            });\n\n            if (data.result !== 'false') {\n                Object.keys(data.result).map((key) => {\n                    dispatch({\n                        type: 'msg_received',\n                        id: data.result[key].chat_id,\n                        value: {msg: data.result[key].msg, mn: data.result[key].mn}\n                    })\n                });\n            }\n        }\n\n        function supportUnreadChat(params) {\n            if (params.id && params.unread == true) {\n                dispatch({\n                    type: 'update_chat',\n                    id: params.id,\n                    value: {support_chat: true}\n                })\n            }\n        }\n\n        function typingVisitor(params) {\n            dispatch({\n                type: 'update_chat',\n                id: params.id,\n                value: {tp: 'true','tx' : params.txt}\n            })\n        }\n\n        function typingVisitorStopped(params) {\n            dispatch({\n                type: 'update_chat',\n                id: params.id,\n                value: {tp: 'false'}\n            })\n        }\n\n        function activateNextTab(chatid,up) {\n            var index = chatsRef.current.chats.findIndex(x => x.active == true);\n            if (index === -1) { return; }\n            if ((chatsRef.current.chats.length - 1) > index && up == false) {\n                chatTabClick(chatsRef.current.chats[index + 1]);\n            } else if (index > 0 && up == true) {\n                chatTabClick(chatsRef.current.chats[index - 1]);\n            }\n        }\n\n        ee.addListener('chatStartTab',addTab)\n        ee.addListener('chatStartBackground',addTabBackground)\n        ee.addListener('removeSynchroChat',removeTab)\n        ee.addListener('chatTabClicked',tabClicked)\n        ee.addListener('chatTabFocused',tabClicked)\n        ee.addListener('chatAdminSync',chatAdminSync)\n        ee.addListener('supportUnreadChat',supportUnreadChat)\n        ee.addListener('nodeJsTypingVisitor',typingVisitor)\n        ee.addListener('nodeJsTypingVisitorStopped',typingVisitorStopped)\n        ee.addListener('activateNextTab',activateNextTab)\n\n        if (localStorage) {\n            var achat_id = localStorage.getItem('achat_id');\n            if (achat_id !== null && achat_id !== '') {\n                var ids = achat_id.split(',');\n                var entries = [];\n                ids.forEach((id) => {\n                   var el = document.getElementById('chat-tab-link-'+id);\n                   if (el !== null) {\n                       var active = el.classList.contains('active');\n                       entries.push({id: parseInt(id), active: active})\n                   }\n               });\n               dispatch({\n                    type: 'update',\n                    value: {\n                        \"chats\" : entries\n                    }\n                });\n               ids.length > 0 && loadChatTabIntro(ids);\n\n               // Find active chat\n               setTimeout(() => {\n                   ids.forEach((id) => {\n                       var el = document.getElementById('chat-tab-link-'+id);\n                       if (el !== null) {\n                           el.classList.contains('active') && tabClicked(parseInt(id));\n                       }\n                   });\n               },1000);\n            }\n         }\n\n        // Cleanup\n        return function cleanup() {\n            ee.removeListener('chatStartTab', addTab);\n            ee.removeListener('chatStartBackground', addTabBackground);\n            ee.removeListener('removeSynchroChat', removeTab);\n            ee.removeListener('chatTabClicked', tabClicked);\n            ee.removeListener('chatTabFocused', tabClicked);\n            ee.removeListener('chatAdminSync', chatAdminSync);\n            ee.removeListener('supportUnreadChat', chatAdminSync);\n            ee.removeListener('nodeJsTypingVisitor', typingVisitor);\n            ee.removeListener('nodeJsTypingVisitorStopped', typingVisitorStopped);\n            ee.removeListener('activateNextTab', activateNextTab);\n        };\n\n    },[]);\n\n    const chatTabClick = (chat) => {\n        $('#chat-tab-link-'+chat.id).click();\n    }\n\n    const closeDialog = (e,chat) => {\n        e.preventDefault();\n        e.stopPropagation();\n        lhinst.removeDialogTab(chat.id,$('#tabs'),true);\n    }\n\n    const { t, i18n } = useTranslation('chat_tabs');\n\n    return (\n        <React.Fragment>\n            {(!state.chats || state.chats.length == 0) && <div className=\"text-center text-muted p-2\"><span className=\"material-icons\">chat</span>{t('chat_tabs.open_chats')}</div>}\n            {state.chats.map((chat, index) => (\n                <div title={chat.id} onClick={() => chatTabClick(chat)} className={\"p-1 action-image chat-tabs-row\"+(chat.active ? ' chat-tab-active' : '')}>\n                        <div className=\"fs12\">\n                            {chat.support_chat && <span className=\"whatshot blink-ani text-warning material-icons\">whatshot</span>}<i className={\"material-icons \"+(chat.us == 2 ? \"icon-user-away\" : (chat.us == 0 ? \"icon-user-online\" : \"icon-user-offline\"))}  >face</i><i className={\"material-icons icon-user-online \" + (chat.um == 1 ? \"icon-user-offline\" : \"icon-user-online\")}>send</i>{chat.cc && <img title={chat.cn} src={chat.cc} alt=\"\" />} {(state.group_offline == false || !(chat.us != 0)) && <span className={(chat.mn > 0 ? \"font-weight-bold \" : '') + (chat.cs == 0 ? 'text-warning' : '')}>{chat.nick || chat.id}</span>}{chat.mn > 0 && <span className=\"msg-nm pl-1\">({chat.mn})</span>}{chat.lmsg && <span className=\"text-muted\"> {chat.lmsg}</span>}\n                            <button type=\"button\" onClick={(e) => closeDialog(e,chat)} className=\"float-right btn-light m-0 ml-1 p-0 btn btn-xs\"><i className=\"material-icons mr-0\">close</i></button>\n                            {chat.dep && <span className=\"float-right text-muted text-truncate mw-80px\"><span className=\"material-icons\">home</span>{chat.dep}</span>}\n                            {chat.co == confLH.user_id && <span className=\"float-right text-muted\"><span title={t('chat_tabs.chat_owner')} className=\"material-icons\">account_box</span></span>}\n                        </div>\n\n                        {(chat.msg || (chat.tp == 'true' && chat.tx)) && <div className=\"fs13 text-muted pt-1\">\n                            <span title={chat.tp == 'true' && chat.tx ? chat.tx : chat.msg} className={\"d-inline-block text-truncate mw-100 \"+(chat.mn > 0 ? 'font-weight-bold' : '')+(chat.tp == 'true' && chat.tx ? ' font-italic': '')}>\n                                {chat.tp == 'true' && chat.tx ? chat.tx : chat.msg}\n                            </span>\n                        </div>}\n                </div>\n            ))}\n        </React.Fragment>\n    );\n}\n\nexport default DashboardChatTabs"],"sourceRoot":""}