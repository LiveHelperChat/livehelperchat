{"version":3,"file":"a165c39d3d8cab880d50.js","mappings":"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","sources":["webpack://LiveHelperChat/./src/util/nodeJSChat.js"],"sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _nodeJSChat {\n\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n    }\n\n    async setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const vid = this.attributes.userSession.getVID();\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            disconnectOnUnload: false,\n            authTokenName: 'socketCluster.authToken_vi'\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var socketCluster = require(\"socketcluster-client\");\n\n        var socket = socketCluster.create(socketOptions);\n\n        var chanelName = 'uo_' + vid;\n        var instance_id = this.attributes.instance_id;\n        var sampleChannel = null;\n\n        let status = await socket.listener('connect').once();\n        if (status.isAuthenticated) {\n            connectSiteVisitor();\n            attributes.LHC_API.args.check_messages = false;\n        } else {\n            authentificate();\n        }\n\n        try {\n            for await (let event of socket.listener('deauthenticate')) {\n                authentificate();\n            }\n        } catch (e) {\n            // shut up old browers\n        }\n\n\n        function authentificate() {\n            helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, async (data) => {\n                instance_id = data.instance_id;\n                await Promise.all([\n                    socket.invoke('login',{hash: data.hash, chanelName: chanelName, instance_id: data.instance_id}),\n                    socket.listener('authenticate').once()\n                ]);\n                connectSiteVisitor();\n            })\n        }\n\n        async function connectSiteVisitor() {\n            var firstRun = sampleChannel == null;\n            sampleChannel = socket.subscribe('uo_' + vid);\n            if (firstRun == true) {\n                try {\n                    // We want to receive signal is widget open in any of the windows\n                    attributes.mode != 'embed' && !attributes.widgetStatus.value && socket.transmitPublish('uo_' + vid, {op: 'ws_isopen'});\n\n                    // We want to publish request to receive all the vars other instances has\n                    attributes.lhc_var !== null && socket.transmitPublish('uo_' + vid, {op: 'check_vars'});\n\n                    // Subscribe to widget status, just ignore initial status\n                    attributes.mode != 'embed' && attributes.widgetStatus.subscribe((data) => {\n                        socket.transmitPublish('uo_' + vid, {op: 'wstatus', status: data});\n                    }, true);\n\n                    // Listen for chat started event and dispatch to other windows\n                    attributes.eventEmitter.addListener('chatStarted', function (data, mode) {\n                        if (mode !== 'popup' || attributes.kcw === true) {\n                            socket.transmitPublish('uo_' + vid, {op: 'chat_started', data: data});\n                        }\n                    });\n                } catch (e) {\n                    console.log(e);\n                }\n                try {\n                    for await (let op of sampleChannel) {\n                        if (op.op == 'check_message') {\n                            attributes.eventEmitter.emitEvent('checkMessageOperator');\n                        } else if (op.op == 'is_online') {\n                            socket.transmitPublish('ous_'+instance_id,{op:'vi_online', status: true, vid: vid});\n                        } else if (op.op == 'chat_started') {\n                            try {\n                                if (attributes.userSession.id === null && op.data.id) {\n                                    chatEvents.sendChildEvent('reopenNotification', [{\n                                        'id': op.data.id,\n                                        'hash': op.data.hash\n                                    }]);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'ws_isopen') {\n                            try {\n                                if (attributes.mode != 'embed' && attributes.widgetStatus.value) {\n                                    socket.transmitPublish('uo_'+vid,{op:'wstatus', status: true});\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n\n                        } else if (op.op == 'wstatus') {\n                            try {\n                                if (attributes.mode != 'embed' && op.status != attributes.widgetStatus.value) {\n                                    attributes.widgetStatus.next(op.status);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'current_vars') {\n                            try {\n                                if (op.lhc_var && attributes.lhc_var !== null) {\n                                    for (var index in op.lhc_var) {\n                                        if (typeof attributes.lhc_var[index] == 'undefined') {\n                                            attributes.lhc_var[index] = op.lhc_var[index];\n                                        }\n                                    }\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'check_vars') {\n                            attributes.lhc_var && socket.transmitPublish('uo_'+vid,{op:'current_vars', 'lhc_var': attributes.lhc_var});\n                        }\n                    }\n                } catch (e) {\n                    // shut up old browsers\n                }\n            }\n        }\n\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport {nodeJSChat};\n\n"],"names":["_nodeJSChat","_createClass","_classCallCheck","this","params","attributes","chatEvents","key","value","_setParams","_asyncToGenerator","_regeneratorRuntime","_callee3","vid","socketOptions","socketCluster","socket","chanelName","instance_id","sampleChannel","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","authentificate","connectSiteVisitor","_connectSiteVisitor","_context3","prev","next","_callee2","firstRun","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","op","index","_context2","subscribe","mode","widgetStatus","transmitPublish","lhc_var","data","status","eventEmitter","addListener","kcw","e","console","log","_asyncIterator","sent","done","emitEvent","userSession","id","sendChildEvent","hash","t0","return","finish","t1","stop","apply","arguments","helperFunctions","makeRequest","LHC_API","args","lhc_base_url","ts","Date","getTime","_ref","_callee","_context","Promise","all","invoke","listener","once","_x4","getVID","protocolVersion","hostname","path","disconnectOnUnload","authTokenName","port","parseInt","secure","require","create","isAuthenticated","check_messages","_x","_x2","_x3","nodeJSChat"],"sourceRoot":""}