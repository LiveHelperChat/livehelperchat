{"version":3,"file":"2897a5b53a777c8c434e.js","mappings":"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","sources":["webpack://LiveHelperChat/./src/util/nodeJSChat.js"],"sourcesContent":["import {helperFunctions} from '../lib/helperFunctions';\n\nclass _nodeJSChat {\n\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n    }\n\n    async setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const vid = this.attributes.userSession.getVID();\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            disconnectOnUnload: false,\n            authTokenName: 'socketCluster.authToken_vi'\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var socketCluster = require(\"socketcluster-client\");\n\n        var socket = socketCluster.create(socketOptions);\n\n        var chanelName = 'uo_' + vid;\n        var instance_id = this.attributes.instance_id;\n        var sampleChannel = null;\n        // Do not update vars while we are updating it from other browser tabs\n        var ignoreVars = false;\n\n        let status = await socket.listener('connect').once();\n        if (status.isAuthenticated) {\n            connectSiteVisitor();\n            attributes.LHC_API.args.check_messages = false;\n        } else {\n            authentificate();\n        }\n\n        try {\n            for await (let event of socket.listener('deauthenticate')) {\n                authentificate();\n            }\n        } catch (e) {\n            // shut up old browers\n        }\n\n\n        function authentificate() {\n            helperFunctions.makeRequest(attributes.LHC_API.args.lhc_base_url + attributes['lang'] + \"nodejshelper/tokenvisitor\", { params: {ts: (new Date()).getTime()}}, async (data) => {\n                instance_id = data.instance_id;\n                await Promise.all([\n                    socket.invoke('login',{hash: data.hash, chanelName: chanelName, instance_id: data.instance_id}),\n                    socket.listener('authenticate').once()\n                ]);\n                connectSiteVisitor();\n            })\n        }\n\n        async function connectSiteVisitor() {\n            var firstRun = sampleChannel == null;\n            sampleChannel = socket.subscribe('uo_' + vid);\n            if (firstRun == true) {\n                try {\n                    // We want to receive signal is widget open in any of the windows\n                    attributes.mode != 'embed' && !attributes.widgetStatus.value && socket.transmitPublish('uo_' + vid, {op: 'ws_isopen'});\n\n                    // We want to publish request to receive all the vars other instances has\n                    if (attributes.lhc_var !== null) {\n                        socket.transmitPublish('uo_' + vid, { 'clientId' : sampleChannel.client.clientId, op: 'check_vars', 'init':false, 'lhc_var': attributes.lhc_var});\n                        attributes.eventEmitter.addListener('jsVarsUpdated', function () {\n                            ignoreVars === false && attributes.ignoreVars === false && socket.transmitPublish('uo_' + vid, {'clientId' : sampleChannel.client.clientId, op:'current_vars', 'init':false, 'lhc_var': attributes.lhc_var});\n                            ignoreVars = false;\n                        });\n                    }\n\n                    // Subscribe to widget status, just ignore initial status\n                    attributes.mode != 'embed' && attributes.widgetStatus.subscribe((data) => {\n                        socket.transmitPublish('uo_' + vid, {op: 'wstatus', status: data});\n                    }, true);\n\n                    // Listen for chat started event and dispatch to other windows\n                    attributes.eventEmitter.addListener('chatStarted', function (data, mode) {\n                        if (mode !== 'popup' || attributes.kcw === true) {\n                            socket.transmitPublish('uo_' + vid, {op: 'chat_started', data: data});\n                        }\n                    });\n                } catch (e) {\n                    console.log(e);\n                }\n                try {\n                    for await (let op of sampleChannel) {\n                        if (op.op == 'check_message') {\n                            attributes.eventEmitter.emitEvent('checkMessageOperator');\n                        } else if (op.op == 'is_online') {\n                            socket.transmitPublish('ous_'+instance_id,{op:'vi_online', status: true, vid: vid});\n                        } else if (op.op == 'chat_started') {\n                            try {\n                                if (attributes.userSession.id === null && op.data.id) {\n                                    chatEvents.sendChildEvent('reopenNotification', [{\n                                        'id': op.data.id,\n                                        'hash': op.data.hash\n                                    }]);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'ws_isopen') {\n                            try {\n                                if (attributes.mode != 'embed' && attributes.widgetStatus.value) {\n                                    socket.transmitPublish('uo_'+vid,{op:'wstatus', status: true});\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n\n                        } else if (op.op == 'wstatus') {\n                            try {\n                                if (attributes.mode != 'embed' && op.status != attributes.widgetStatus.value) {\n                                    attributes.widgetStatus.next(op.status);\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        } else if (op.op == 'current_vars' || op.op == 'check_vars') {\n                            try {\n                                if (sampleChannel.client.clientId != op.clientId){\n                                    if (op.lhc_var && attributes.lhc_var !== null) {\n                                        ignoreVars = true;\n                                        attributes.ignoreVars = true;\n                                        for (var index in op.lhc_var) {\n                                            if ((typeof attributes.lhc_var[index] === 'undefined' || attributes.lhc_var[index] === '' || op.init === false) && op.lhc_var[index] !== '' && attributes.lhc_var[index] !== op.lhc_var[index]) {\n                                                attributes.lhc_var[index] = op.lhc_var[index];\n                                            }\n                                        }\n                                        attributes.ignoreVars = false;\n                                    }\n                                    if (op.op == 'check_vars') {\n                                        attributes.lhc_var !== null && socket.transmitPublish('uo_'+vid,{'clientId' : sampleChannel.client.clientId, op:'current_vars', 'init':true, 'lhc_var': attributes.lhc_var});\n                                    }\n                                }\n                            } catch (e) {\n                                console.log(e);\n                            }\n                        }\n                    }\n                } catch (e) {\n                    // shut up old browsers\n                }\n            }\n        }\n\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport {nodeJSChat};\n\n"],"names":["_nodeJSChat","_createClass","_classCallCheck","this","params","attributes","chatEvents","key","value","_setParams","_asyncToGenerator","_regeneratorRuntime","_callee3","vid","socketOptions","socketCluster","socket","chanelName","instance_id","sampleChannel","ignoreVars","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","authentificate","connectSiteVisitor","_connectSiteVisitor","_context3","prev","next","_callee2","firstRun","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","op","index","_context2","subscribe","mode","widgetStatus","transmitPublish","lhc_var","client","clientId","eventEmitter","addListener","data","status","kcw","e","console","log","_asyncIterator","sent","done","emitEvent","userSession","id","sendChildEvent","hash","init","t0","return","finish","t1","stop","apply","arguments","helperFunctions","makeRequest","LHC_API","args","lhc_base_url","ts","Date","getTime","_ref","_callee","_context","Promise","all","invoke","listener","once","_x4","getVID","protocolVersion","hostname","path","disconnectOnUnload","authTokenName","port","parseInt","secure","require","create","isAuthenticated","check_messages","_x","_x2","_x3","nodeJSChat"],"sourceRoot":""}