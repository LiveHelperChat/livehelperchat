{"version":3,"file":"277.b148f86c75b2350ea743.js","mappings":"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","sources":["webpack://LHCReactAPP/./src/extensions/nodejs/nodeJSChat.js"],"sourcesContent":["import { helperFunctions } from \"../../lib/helperFunctions\";\nimport { fetchMessages, checkChatStatus, updateMessage } from \"../../actions/chatActions\"\n\nimport socketCluster from \"socketcluster-client\";\nimport i18n from \"../../i18n\";\n\n\nclass _nodeJSChat {\n    constructor() {\n        this.socket = null;\n\n        // On chat close event close connection\n        helperFunctions.eventEmitter.addListener('endedChat', () => {\n            if (this.socket !== null) {\n                this.socket.disconnect();\n            }\n        });\n    }\n\n    bootstrap(params, dispatch, getState) {\n\n        const state = getState();\n        const chatId = state.chatwidget.getIn(['chatData','id']);\n        const chatHash = state.chatwidget.getIn(['chatData','hash']);\n        const syncDefault = state.chatwidget.getIn(['chat_ui','sync_interval']);\n        var streamFlowStarted = null;\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            autoReconnectOptions: {initialDelay: 5000, randomness: 5000}\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var chanelName;\n\n        if (params.instance_id > 0) {\n            chanelName = ('chat_'+params.instance_id+'_'+chatId);\n        } else{\n            chanelName = ('chat_'+chatId);\n        }\n\n        var socket = this.socket = socketCluster.create(socketOptions);\n\n        var sampleChannel = null;\n\n        (async () => {\n            try {\n                for await (let status of socket.listener('connect')) {\n                    doActionByConnectionStatus(status);\n                }\n            } catch (e) {\n                let status = await socket.listener('connect').once();\n                doActionByConnectionStatus(status);\n            }\n        })();\n\n        function doActionByConnectionStatus(status) {\n            if (status.isAuthenticated && chatId > 0) {\n                connectVisitor();\n            } else {\n                authentificate();\n            }\n        }\n\n        function authentificate() {\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then(async (response) => {\n                await Promise.all([\n                    socket.invoke('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }),\n                    socket.listener('authenticate').once()\n                ]);\n                connectVisitor();\n            });\n        }\n\n       function visitorTypingListener(data)\n       {\n            if (data.status == true){\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':data.msg});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vt','msg':data.msg});\n                }\n            } else {\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vts'});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vts'});\n                }\n            }\n       }\n\n       function messageSend(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId, {'op':'vt','msg':'✉️ ' + data.msg});\n            } else {\n                socket.transmitPublish('chat_'+chatId,{'op':'vt', 'msg':'✉️ ' + data.msg});\n            }\n        }\n\n       function messageSendError(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            } else {\n                socket.transmitPublish('chat_'+chatId, {'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            }\n        }\n\n        function disconnect() {\n\n            if (sampleChannel !== null) {\n                try {\n                    sampleChannel.unsubscribe();\n                } catch (e) {\n\n                }\n            }\n\n            helperFunctions.eventEmitter.removeListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.removeListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.removeListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: syncDefault}\n            });\n\n            dispatch({\n                'type': 'CHAT_REMOVE_OVERRIDE',\n                'data': \"typing\"\n            });\n        }\n\n        (async () => {\n            try {\n                for await (let event of socket.listener('disconnect')) {\n                    disconnect();\n                }\n            } catch (e) {\n                let status = await socket.listener('disconnect').once();\n                disconnect();\n            }\n        })();\n\n        function connectVisitor() {\n            var firstRun = sampleChannel == null;\n\n            if (params.instance_id > 0) {\n                sampleChannel = socket.subscribe('chat_'+params.instance_id+'_'+chatId);\n            } else {\n                sampleChannel = socket.subscribe('chat_' + chatId);\n            }\n\n            helperFunctions.eventEmitter.addListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.addListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.addListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_ADD_OVERRIDE',\n                'data': \"typing\"\n            });\n\n            if (firstRun == true)\n            {\n                (async () => {\n                    try {\n                        for await (let event of sampleChannel.listener('subscribe')) {\n                            socket.transmitPublish((params.instance_id > 0 ? 'chat_' + params.instance_id + '_' + chatId : 'chat_' + chatId), {\n                                'op': 'vi_online',\n                                status: true\n                            });\n                            dispatch({\n                                'type': 'CHAT_UI_UPDATE',\n                                'data': {sync_interval: 10000}\n                            });\n                        }\n                    } catch (e) {\n                        let event = await sampleChannel.listener('subscribe').once();\n                        socket.transmitPublish((params.instance_id > 0 ? 'chat_' + params.instance_id + '_' + chatId : 'chat_' + chatId), {\n                            'op': 'vi_online',\n                            status: true\n                        });\n                    }\n\n                })();\n                (async () => {\n                    try {\n                        for await (let op of sampleChannel) {\n                            if (op.op == 'ot') { // Operator Typing Message\n                                if (op.data.status == true) {\n                                    dispatch({\n                                        'type': 'chat_status_changed',\n                                        'data': {text: op.data.typer ? op.data.typer + \" \" + i18n.t('chat.typing'): op.data.ttx}\n                                    });\n                                } else {\n                                    dispatch({\n                                        'type': 'chat_status_changed',\n                                        'data': {text: ''}\n                                    });\n                                }\n                            } else if (op.op == 'sflow') {\n\n                                // We don't have any\n                                if (streamFlowStarted === null) {\n                                    streamFlowStarted = document.querySelector('#messages-scroll > div.message-row-typing > .msg-body');\n                                    if (streamFlowStarted) {\n                                        streamFlowStarted.innerText = \"\";\n                                    }\n                                }\n\n                                console.log(op.msg);\n\n                                if (streamFlowStarted) {\n                                    streamFlowStarted.innerText += op.msg;\n                                    streamFlowStarted.scrollIntoView();\n                                    streamFlowStarted.classList.add('message-row-typing-stream');\n                                }\n\n                            } else if (op.op == 'cmsg' || op.op == 'schange') {\n                                streamFlowStarted = null;\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])){\n                                    dispatch(fetchMessages({\n                                        'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                        'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                        'lmgsid' : state.chatwidget.getIn(['chatLiveData','lmsgid']),\n                                        'theme' : state.chatwidget.get('theme'),\n                                        'active_widget':  (((state.chatwidget.get('shown') && state.chatwidget.get('mode') == 'widget') || (state.chatwidget.get('mode') != 'widget' && document.hasFocus())) && window.lhcChat['is_focused'] == true)\n                                    }));\n                                }\n                            } else if (op.op == 'umsg') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])) {\n                                    updateMessage({'msg_id' :  op.msid,'id' : state.chatwidget.getIn(['chatData','id']), 'hash' : state.chatwidget.getIn(['chatData','hash'])})(dispatch, getState);\n                                }\n                            } else if (op.op == 'schange' || op.op == 'cclose') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])){\n                                    dispatch(checkChatStatus({\n                                        'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                        'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                        'mode' : state.chatwidget.get('mode'),\n                                        'theme' : state.chatwidget.get('theme')\n                                    }));\n                                }\n                            } else if (op.op == 'vo') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])) {\n                                    socket.transmitPublish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+state.chatwidget.getIn(['chatData','id']) : 'chat_'+state.chatwidget.getIn(['chatData','id'])) ,{'op':'vi_online', status: true});\n                                }\n                            }\n                        }\n                    } catch (e) {\n                        // Shut up old browsers\n                    }\n                })();\n            }\n       }\n\n       (async () => {\n            try {\n                for await (let event of socket.listener('deauthenticate')) {\n                    authentificate();\n                }\n            } catch (e) {\n                let event = await socket.listener('deauthenticate').once();\n                authentificate();\n            }\n       })();\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport { nodeJSChat };"],"names":["_nodeJSChat","_createClass","_this","_classCallCheck","this","socket","helperFunctions","eventEmitter","addListener","disconnect","key","value","params","dispatch","getState","state","chatId","chatwidget","getIn","syncDefault","streamFlowStarted","socketOptions","protocolVersion","hostname","path","autoReconnectOptions","initialDelay","randomness","port","parseInt","secure","instance_id","socketCluster","sampleChannel","doActionByConnectionStatus","status","isAuthenticated","connectVisitor","authentificate","chat_id","window","lhcAxios","post","lhcChat","headers","then","_ref2","_asyncToGenerator","_regeneratorRuntime","_callee2","response","_context2","prev","next","Promise","all","invoke","hash","data","chanelName","listener","once","stop","_x","apply","arguments","visitorTypingListener","transmitPublish","msg","messageSend","messageSendError","unsubscribe","e","removeListener","sync_interval","firstRun","subscribe","_callee4","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator3","_step3","_context4","_asyncIterator","sent","done","t0","return","finish","t1","_callee5","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator4","_step4","op","_state","_state2","_state3","_state4","_context5","text","typer","i18n","t","ttx","document","querySelector","innerText","console","log","scrollIntoView","classList","add","hasIn","fetchMessages","get","hasFocus","updateMessage","msid","checkChatStatus","_callee","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","_context","_callee3","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator2","_step2","_context3","_callee6","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator5","_step5","_context6","nodeJSChat"],"sourceRoot":""}