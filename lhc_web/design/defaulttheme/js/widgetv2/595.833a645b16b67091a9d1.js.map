{"version":3,"file":"595.833a645b16b67091a9d1.js","mappings":"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","sources":["webpack://LHCReactAPP/./src/components/InlineSurvey.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { submitInlineSurvey } from \"../actions/chatActions\"\nimport { helperFunctions } from \"../lib/helperFunctions\";\nimport parse, { domToReact } from 'html-react-parser';\nimport { withTranslation } from 'react-i18next';\n\n@connect((store) => {\n    return {\n        chatwidget: store.chatwidget\n    };\n})\n\nclass InlineSurvey extends Component {\n\n    state = {\n        currentQuestion: 1,\n        is_valid: null,\n        collectedData: {}, // Holds questions data themself with post variables names matching standard one\n        collectedQuestion: [] // Holds information which questions were answered/entered\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    abstractClick(attrs, attrsQuestion, e) {\n        var presentState = this.state.collectedData;\n        var collectedQuestion = this.state.collectedQuestion;\n        var validData = false;\n\n        if (attrs['data-inline'] == 'plain') {\n            if (e.target.value != '') {\n                validData = true;\n                presentState[attrs.name] = e.target.value;\n            }\n        } else {\n            validData = true;\n            presentState[attrs.name] = attrs.value;\n        }\n\n        if (validData === true && collectedQuestion.indexOf(attrsQuestion.seq) === -1) {\n            collectedQuestion.push(attrsQuestion.seq);\n        } else if (validData === false && collectedQuestion.indexOf(attrsQuestion.seq) !== -1) {\n            collectedQuestion.splice(collectedQuestion.indexOf(attrsQuestion.seq),1);\n        }\n\n        this.setState({'collectedData' : presentState, 'collectedQuestion': collectedQuestion});\n    }\n\n    submitSurvey() {\n        this.state.collectedData['survey_id'] = this.props.survey_id;\n        this.state.collectedData['chat_id'] = this.props.chatwidget.getIn(['chatData','id']);\n        this.state.collectedData['hash'] = this.props.chatwidget.getIn(['chatData','hash']);\n        submitInlineSurvey(this.state.collectedData).then((data) => {\n            var newState = {'is_valid': data.data.is_valid};\n                newState['feedback_text'] = data.data.result;\n\n            this.setState(newState);\n        })\n    }\n\n    render() {\n\n        const { t } = this.props;\n\n        var counter = 1;\n        var totalQuestions = 0;\n\n        domToReact(this.props.surveyOptions,{\n            replace: domNode => {\n                if (!domNode.attribs) {\n                    return;\n                }\n                if (domNode.name === 'voteoption') {\n                    totalQuestions++;\n                }\n            }\n        })\n\n        return (\n            <div>\n\n                {this.state.is_valid === false && parse(this.state.feedback_text, {\n                    replace: domNode => {\n                        if (domNode.attribs) {\n                            if (domNode.name && domNode.name === 'button') {\n                                return <button type=\"button\" {...domNode.attribs} onClick={(e) => this.setState({'is_valid':null})} />\n                            }\n                        }\n                    }})}\n                {this.state.is_valid === true && <div>\n                    {parse(this.state.feedback_text)}\n                </div>}\n\n                {this.state.is_valid !== true && domToReact(this.props.surveyOptions,{\n                    replace: domNode => {\n                        if (!domNode.attribs) {\n                            return;\n                        }\n\n                        if (domNode.name === 'voteoption') {\n\n                            let classNameItem = this.state.currentQuestion != counter ? 'd-none' : '';\n\n                            counter++;\n\n                            let disabledNext = domNode.attribs['is-required'] == 1 && this.state.collectedQuestion.indexOf(domNode.attribs.seq) === -1 ? true : false\n                            let classNameButtons = \"d-block pt-3\" + (totalQuestions == 1 ? ' text-center' : '');\n                            let classSubmitButton = \"btn btn-outline-secondary btn-sm\" + (totalQuestions > 1 ? ' float-end' : '') + ' btn-survey-submit';\n\n                            return <div {...domNode.attribs} className={classNameItem} >\n                                    {domToReact(domNode.children, {\n\n                                        replace: domNodeChild => {\n                                            if (!domNodeChild.attribs) {\n                                                return;\n                                            }\n\n                                            if (domNodeChild.name && domNodeChild.name === 'input' && domNodeChild.attribs.type && domNodeChild.attribs.type == 'radio') {\n                                                var cloneAttr = Object.assign({}, domNodeChild.attribs);\n                                                return <input type=\"radio\" {...domNodeChild.attribs} onChange={(e) => this.abstractClick(cloneAttr, domNode.attribs, e)} />\n                                            } else if (domNodeChild.name && domNodeChild.name === 'textarea') {\n                                                var cloneAttr = Object.assign({}, domNodeChild.attribs);\n                                                return <textarea style={{\"height\": \"55px\"}} {...domNodeChild.attribs} onChange={(e) => this.abstractClick(cloneAttr, domNode.attribs, e)}></textarea>\n                                            }\n                                        }\n\n                                    })}\n                                <div className={classNameButtons}>\n\n                                    {this.state.currentQuestion > 1 && <input type=\"button\" className=\"btn btn-outline-secondary btn-sm btn-survey-prev\" onClick={(e) => this.setState({'currentQuestion' : this.state.currentQuestion - 1})} value={t('button.back')}  name=\"Prev\"/>}\n\n                                    {totalQuestions > this.state.currentQuestion && <input disabled={disabledNext} type=\"button\" className=\"btn btn-outline-secondary btn-sm float-end btn-survey-next\" onClick={(e) => this.setState({'currentQuestion' : this.state.currentQuestion + 1})} value={t('button.next')}  name=\"Next\"/>}\n\n                                    {totalQuestions == this.state.currentQuestion && <input disabled={disabledNext} type=\"button\" className={classSubmitButton} onClick={(e) => this.submitSurvey()} value={t('button.submit')}  name=\"Submit\"/>}\n                                </div>\n                            </div>;\n                        }\n                    }\n                })}\n            </div>\n        );\n    }\n}\n\nexport default withTranslation()(InlineSurvey);"],"names":["InlineSurvey","connect","store","chatwidget","_dec","_class","_Component","props","_this","_classCallCheck","_defineProperty","currentQuestion","is_valid","collectedData","collectedQuestion","_inherits","_createClass","key","value","attrs","attrsQuestion","e","presentState","this","state","validData","target","name","indexOf","seq","push","splice","setState","_this2","survey_id","getIn","submitInlineSurvey","then","data","newState","result","_this3","t","counter","totalQuestions","domToReact","surveyOptions","replace","domNode","attribs","React","parse","feedback_text","_extends","type","onClick","classNameItem","disabledNext","classNameButtons","classSubmitButton","className","children","domNodeChild","cloneAttr","Object","assign","onChange","abstractClick","style","disabled","submitSurvey","Component","withTranslation"],"sourceRoot":""}