{"version":3,"file":"610.097dd6a3db5d2fd3cd60.js","mappings":"uUAWMA,GANLC,EAAAA,EAAAA,KAAQ,SAACC,GACN,MAAO,CACHC,WAAYD,EAAMC,cAFlB,e,6aAYJ,WAAYC,GAAO,yBACf,cAAMA,GADS,mBAJX,IAIW,E,yCAInB,SAAcC,EAAOC,GACjBC,KAAKC,MAAMH,EAAM,gBAAgBI,SAAQ,SAACC,GACnB,iBAAfA,EAAKC,OACLC,SAASC,cAAcH,EAAKI,QAAQC,UAAUC,IAAIN,EAAKO,OACjC,oBAAfP,EAAKC,QACZC,SAASC,cAAcH,EAAKI,QAAQC,UAAUG,OAAOR,EAAKO,UAIlEE,QAAQC,IAAIb,KAAKC,MAAMH,EAAM,mB,oBAGjC,WAAS,WACDgB,EAAOC,KAAKlB,MAAMD,WAAWoB,MAAM,CAAC,UAAUD,KAAKlB,MAAMoB,OAM7D,OAJKF,KAAKlB,MAAMqB,UACZJ,EAAOA,EAAKK,QAAS,qCAAsC,KAI3D,gBAAC,WAAD,KACKlB,GAAAA,CAAMa,EAAM,CACTK,QAAS,SAAAC,GACL,IAAIC,EAAYC,OAAOC,OAAO,GAAIH,EAAQI,SAC1C,GAAIJ,EAAQI,SACJJ,EAAQK,MAAyB,WAAjBL,EAAQK,KACxB,OAAO,8BAAQC,KAAK,UAAaN,EAAQI,QAAlC,CAA2CG,QAAS,SAAC5B,GAAD,OAAO,EAAK6B,cAAcP,EAAWtB,OAAK8B,EAAAA,EAAAA,YAAWT,EAAQU,mB,EA1ChJ,CAMiBC,EAAAA,aAAAA,EA6CzB","sources":["webpack://LHCReactAPP/./src/components/CustomHTML.js"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { helperFunctions } from \"../lib/helperFunctions\";\nimport parse, { domToReact } from 'html-react-parser';\n\n@connect((store) => {\n    return {\n        chatwidget: store.chatwidget\n    };\n})\n\nclass CustomHTML extends Component {\n\n    state = {\n\n    }\n\n    constructor(props) {\n        super(props);\n    }\n\n    abstractClick(attrs, e) {\n        JSON.parse(attrs['data-action']).forEach((item) => {\n            if (item.action == 'add_css_class') {\n                document.querySelector(item.target).classList.add(item.value);\n            } else if (item.action == 'remove_css_class') {\n                document.querySelector(item.target).classList.remove(item.value);\n            }\n        });\n\n        console.log(JSON.parse(attrs['data-action']));\n    }\n\n    render() {\n        let html = this.props.chatwidget.getIn(['chat_ui',this.props.attr]);\n\n        if (!this.props.has_new) {\n            html = html.replace( /<newmessages>(.*)<\\/newmessages>/gi, \"\");\n        }\n\n        return (\n            <React.Fragment>\n                {parse(html, {\n                    replace: domNode => {\n                        var cloneAttr = Object.assign({}, domNode.attribs);\n                        if (domNode.attribs) {\n                            if (domNode.name && domNode.name === 'button') {\n                                return <button type=\"button\" {...domNode.attribs} onClick={(e) => this.abstractClick(cloneAttr, e)}>{domToReact(domNode.children)}</button>\n                            }\n                        }\n                    }})}\n            </React.Fragment>\n        );\n    }\n}\n\nexport default CustomHTML;"],"names":["CustomHTML","connect","store","chatwidget","props","attrs","e","JSON","parse","forEach","item","action","document","querySelector","target","classList","add","value","remove","console","log","html","this","getIn","attr","has_new","replace","domNode","cloneAttr","Object","assign","attribs","name","type","onClick","abstractClick","domToReact","children","Component"],"sourceRoot":""}