{"version":3,"sources":["webpack://LiveHelperChat/./src/util/nodeJSChat.js"],"names":["nodeJSChat","this","params","attributes","chatEvents","vid","userSession","getVID","socketOptions","hostname","path","port","parseInt","secure","socket","require","connect","connectSiteVisitor","sampleChannel","subscribe","on","err","console","error","watch","op","eventEmitter","emitEvent","chanelName","status","isAuthenticated","LHC_API","args","check_messages","emit","hash","log"],"mappings":"maA4EMA,EAAa,I,WA1Ef,c,4FAAc,SACVC,KAAKC,OAAS,GACdD,KAAKE,WAAa,KAClBF,KAAKG,WAAa,K,4CAGZF,EAAQC,EAAYC,GAC1BH,KAAKC,OAASA,EACdD,KAAKE,WAAaA,EAClBF,KAAKG,WAAaA,EAElB,IAAMC,EAAMJ,KAAKE,WAAWG,YAAYC,SAEpCC,EAAgB,CAChBC,SAAUP,EAAOO,SACjBC,KAAMR,EAAOQ,MAGE,IAAfR,EAAOS,OACPH,EAAcG,KAAOC,SAASV,EAAOS,OAGpB,GAAjBT,EAAOW,SACPL,EAAcK,QAAS,GAG3B,IAEIC,EAFgBC,EAAQ,IAEDC,QAAQR,GAMnC,SAASS,IACL,IAAIC,EAAgBJ,EAAOK,UAAU,MAAQd,GAE7Ca,EAAcE,GAAG,iBAAiB,SAAUC,GACxCC,QAAQC,MAAM,2DAA6DF,MAG/EH,EAAcM,OAAM,SAAUC,GACb,iBAATA,EAAGA,IACHtB,EAAWuB,aAAaC,UAAU,2BAb9Cb,EAAOM,GAAG,SAAS,SAAUC,GACzBC,QAAQC,MAAMF,MAiBlB,IAAIO,EAAa,WAAgBvB,EAEjCS,EAAOM,GAAG,WAAW,SAAUS,GACvBA,EAAOC,iBACPb,IAGAd,EAAW4B,QAAQC,KAAKC,gBAAiB,GAGzCnB,EAAOoB,KAAK,QAAS,CAACC,KAAMjC,EAAOiC,KAAMP,WAAYA,IAAa,SAAUP,GACpEA,EACAC,QAAQc,IAAIf,IAGZJ,IAGAd,EAAW4B,QAAQC,KAAKC,gBAAiB,a,QASzDjC","file":"ed46b67c2d1fd781889a.js","sourcesContent":["class _nodeJSChat {\n\n    constructor() {\n        this.params = {};\n        this.attributes = null;\n        this.chatEvents = null;\n    }\n\n    setParams(params, attributes, chatEvents) {\n        this.params = params;\n        this.attributes = attributes;\n        this.chatEvents = chatEvents;\n\n        const vid = this.attributes.userSession.getVID();\n\n        var socketOptions = {\n            hostname: params.hostname,\n            path: params.path\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var socketCluster = require(\"socketcluster-client\");\n\n        var socket = socketCluster.connect(socketOptions);\n\n        socket.on('error', function (err) {\n            console.error(err);\n        });\n\n        function connectSiteVisitor(){\n            var sampleChannel = socket.subscribe('uo_' + vid);\n\n            sampleChannel.on('subscribeFail', function (err) {\n                console.error('Failed to subscribe to the sample channel due to error: ' + err);\n            });\n\n            sampleChannel.watch(function (op) {\n                if (op.op == 'check_message') {\n                    attributes.eventEmitter.emitEvent('checkMessageOperator');\n                }\n            });\n        }\n\n        var chanelName = 'chat_'+'uo_' + vid;\n\n        socket.on('connect', function (status) {\n            if (status.isAuthenticated) {\n                connectSiteVisitor();\n\n                // Disable check messages in case we connect to nodejs\n                attributes.LHC_API.args.check_messages = false;\n\n            } else {\n                socket.emit('login', {hash: params.hash, chanelName: chanelName}, function (err) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n\n                        connectSiteVisitor();\n\n                        // Disable check messages in case we connect to nodejs\n                        attributes.LHC_API.args.check_messages = false;\n                    }\n                });\n            }\n        });\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport {nodeJSChat};\n\n"],"sourceRoot":""}