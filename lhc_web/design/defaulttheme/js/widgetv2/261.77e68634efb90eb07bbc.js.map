{"version":3,"file":"261.77e68634efb90eb07bbc.js","mappings":"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","sources":["webpack://LHCReactAPP/./src/extensions/nodejs/nodeJSChat.js"],"sourcesContent":["import { helperFunctions } from \"../../lib/helperFunctions\";\nimport { fetchMessages, checkChatStatus, updateMessage } from \"../../actions/chatActions\"\n\nimport socketCluster from \"socketcluster-client\";\nimport i18n from \"../../i18n\";\n\n\nclass _nodeJSChat {\n    constructor() {\n        this.socket = null;\n\n        // On chat close event close connection\n        helperFunctions.eventEmitter.addListener('endedChat', () => {\n            if (this.socket !== null) {\n                this.socket.disconnect();\n            }\n        });\n    }\n\n    bootstrap(params, dispatch, getState) {\n\n        const state = getState();\n        const chatId = state.chatwidget.getIn(['chatData','id']);\n        const chatHash = state.chatwidget.getIn(['chatData','hash']);\n        const syncDefault = state.chatwidget.getIn(['chat_ui','sync_interval']);\n\n        var socketOptions = {\n            protocolVersion: 1,\n            hostname: params.hostname,\n            path: params.path,\n            autoReconnectOptions: {initialDelay: 5000, randomness: 5000}\n        }\n\n        if (params.port != '') {\n            socketOptions.port = parseInt(params.port);\n        }\n\n        if (params.secure == 1) {\n            socketOptions.secure = true;\n        }\n\n        var chanelName;\n\n        if (params.instance_id > 0) {\n            chanelName = ('chat_'+params.instance_id+'_'+chatId);\n        } else{\n            chanelName = ('chat_'+chatId);\n        }\n\n        var socket = this.socket = socketCluster.create(socketOptions);\n\n        var sampleChannel = null;\n\n        (async () => {\n            try {\n                for await (let status of socket.listener('connect')) {\n                    doActionByConnectionStatus(status);\n                }\n            } catch (e) {\n                let status = await socket.listener('connect').once();\n                doActionByConnectionStatus(status);\n            }\n        })();\n\n        function doActionByConnectionStatus(status) {\n            if (status.isAuthenticated && chatId > 0) {\n                connectVisitor();\n            } else {\n                authentificate();\n            }\n        }\n\n        function authentificate() {\n            const state = getState();\n            let chat_id = state.chatwidget.getIn(['chatData','id']);\n            window.lhcAxios.post(window.lhcChat['base_url'] + \"nodejshelper/tokenvisitor/\"+chat_id+\"/\"+state.chatwidget.getIn(['chatData','hash']), null, {headers : {'Content-Type': 'application/x-www-form-urlencoded'}}).then(async (response) => {\n                await Promise.all([\n                    socket.invoke('login', {hash: response.data, chanelName: (params.instance_id > 0 ? ('chat_'+params.instance_id+'_'+chat_id) : ('chat_'+chat_id)) }),\n                    socket.listener('authenticate').once()\n                ]);\n                connectVisitor();\n            });\n        }\n\n       function visitorTypingListener(data)\n       {\n            if (data.status == true){\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':data.msg});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vt','msg':data.msg});\n                }\n            } else {\n                if (params.instance_id > 0) {\n                    socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vts'});\n                } else {\n                    socket.transmitPublish('chat_'+chatId,{'op':'vts'});\n                }\n            }\n       }\n\n       function messageSend(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId, {'op':'vt','msg':'✉️ ' + data.msg});\n            } else {\n                socket.transmitPublish('chat_'+chatId,{'op':'vt', 'msg':'✉️ ' + data.msg});\n            }\n        }\n\n       function messageSendError(data)\n       {\n            if (params.instance_id > 0) {\n                socket.transmitPublish('chat_'+params.instance_id+'_'+chatId,{'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            } else {\n                socket.transmitPublish('chat_'+chatId, {'op':'vt','msg':'📕️ error happened while sending visitor message, please inform your administrator!'});\n            }\n        }\n\n        function disconnect() {\n\n            if (sampleChannel !== null) {\n                try {\n                    sampleChannel.unsubscribe();\n                } catch (e) {\n\n                }\n            }\n\n            helperFunctions.eventEmitter.removeListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.removeListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.removeListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_UI_UPDATE',\n                'data': {sync_interval: syncDefault}\n            });\n\n            dispatch({\n                'type': 'CHAT_REMOVE_OVERRIDE',\n                'data': \"typing\"\n            });\n        }\n\n        (async () => {\n            try {\n                for await (let event of socket.listener('disconnect')) {\n                    disconnect();\n                }\n            } catch (e) {\n                let status = await socket.listener('disconnect').once();\n                disconnect();\n            }\n        })();\n\n        function connectVisitor() {\n            var firstRun = sampleChannel == null;\n\n            if (params.instance_id > 0) {\n                sampleChannel = socket.subscribe('chat_'+params.instance_id+'_'+chatId);\n            } else {\n                sampleChannel = socket.subscribe('chat_' + chatId);\n            }\n\n            helperFunctions.eventEmitter.addListener('visitorTyping', visitorTypingListener);\n            helperFunctions.eventEmitter.addListener('messageSend', messageSend);\n            helperFunctions.eventEmitter.addListener('messageSendError', messageSendError);\n\n            dispatch({\n                'type': 'CHAT_ADD_OVERRIDE',\n                'data': \"typing\"\n            });\n\n            if (firstRun == true)\n            {\n                (async () => {\n                    try {\n                        for await (let event of sampleChannel.listener('subscribe')) {\n                            socket.transmitPublish((params.instance_id > 0 ? 'chat_' + params.instance_id + '_' + chatId : 'chat_' + chatId), {\n                                'op': 'vi_online',\n                                status: true\n                            });\n                            dispatch({\n                                'type': 'CHAT_UI_UPDATE',\n                                'data': {sync_interval: 10000}\n                            });\n                        }\n                    } catch (e) {\n                        let event = await sampleChannel.listener('subscribe').once();\n                        socket.transmitPublish((params.instance_id > 0 ? 'chat_' + params.instance_id + '_' + chatId : 'chat_' + chatId), {\n                            'op': 'vi_online',\n                            status: true\n                        });\n                    }\n\n                })();\n                (async () => {\n                    try {\n                        for await (let op of sampleChannel) {\n                            if (op.op == 'ot') { // Operator Typing Message\n                                if (op.data.status == true) {\n                                    dispatch({\n                                        'type': 'chat_status_changed',\n                                        'data': {text: op.data.typer ? op.data.typer + \" \" + i18n.t('chat.typing'): op.data.ttx}\n                                    });\n                                } else {\n                                    dispatch({\n                                        'type': 'chat_status_changed',\n                                        'data': {text: ''}\n                                    });\n                                }\n                            } else if (op.op == 'cmsg' || op.op == 'schange') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])){\n                                    dispatch(fetchMessages({\n                                        'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                        'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                        'lmgsid' : state.chatwidget.getIn(['chatLiveData','lmsgid']),\n                                        'theme' : state.chatwidget.get('theme'),\n                                        'active_widget':  (((state.chatwidget.get('shown') && state.chatwidget.get('mode') == 'widget') || (state.chatwidget.get('mode') != 'widget' && document.hasFocus())) && window.lhcChat['is_focused'] == true)\n                                    }));\n                                }\n                            } else if (op.op == 'umsg') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])) {\n                                    updateMessage({'msg_id' :  op.msid,'id' : state.chatwidget.getIn(['chatData','id']), 'hash' : state.chatwidget.getIn(['chatData','hash'])})(dispatch, getState);\n                                }\n                            } else if (op.op == 'schange' || op.op == 'cclose') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])){\n                                    dispatch(checkChatStatus({\n                                        'chat_id': state.chatwidget.getIn(['chatData','id']),\n                                        'hash' : state.chatwidget.getIn(['chatData','hash']),\n                                        'mode' : state.chatwidget.get('mode'),\n                                        'theme' : state.chatwidget.get('theme')\n                                    }));\n                                }\n                            } else if (op.op == 'vo') {\n                                const state = getState();\n                                if (state.chatwidget.hasIn(['chatData','id'])) {\n                                    socket.transmitPublish((params.instance_id > 0 ? 'chat_'+params.instance_id+'_'+state.chatwidget.getIn(['chatData','id']) : 'chat_'+state.chatwidget.getIn(['chatData','id'])) ,{'op':'vi_online', status: true});\n                                }\n                            }\n                        }\n                    } catch (e) {\n                        // Shut up old browsers\n                    }\n                })();\n            }\n       }\n\n       (async () => {\n            try {\n                for await (let event of socket.listener('deauthenticate')) {\n                    authentificate();\n                }\n            } catch (e) {\n                let event = await socket.listener('deauthenticate').once();\n                authentificate();\n            }\n       })();\n    }\n}\n\nconst nodeJSChat = new _nodeJSChat();\nexport { nodeJSChat };"],"names":["_nodeJSChat","this","socket","helperFunctions","disconnect","params","dispatch","getState","state","chatId","chatwidget","getIn","syncDefault","socketOptions","protocolVersion","hostname","path","autoReconnectOptions","initialDelay","randomness","port","parseInt","secure","instance_id","socketCluster","sampleChannel","doActionByConnectionStatus","status","isAuthenticated","connectVisitor","authentificate","chat_id","window","lhcAxios","post","lhcChat","headers","then","response","Promise","all","invoke","hash","data","chanelName","listener","once","visitorTypingListener","transmitPublish","msg","messageSend","messageSendError","unsubscribe","e","sync_interval","firstRun","subscribe","op","text","typer","i18n","ttx","hasIn","fetchMessages","get","document","hasFocus","updateMessage","msid","checkChatStatus","nodeJSChat"],"sourceRoot":""}